import java.io.*;
import java.util.*;

/**
 * -----------------|___________|---------------------
 * CCCCCCCCC   OOOOOOOOOO   DDDDDDDD      EEEEEEEEE
 * CCCC        OOO    OOO   DD    DDD     EEEE
 * CCCC        OOO    OOO   DD     DDD    EEEEEEEEEE
 * CCCC        OOO    OOO   DD     DDDD   EEEE
 * CCCCCCCCC   OOOOOOOOOO   DDDDDDDDDDDD  EEEEEEEEEE
 * -----------------|___________|---------------------
 */

public class Main {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter sout = new PrintWriter(outputStream);

        int t = in.nextInt();
        while (t-- > 0) {
            int n = in.nextInt();
            long[] arr = new long[n];
            for (int i = 0; i < n; i++) {
                arr[i] = in.nextLong();
            }
            Arrays.sort(arr);
            long max = arr[0];
            if (arr.length > 1) {
                for (int i = 1; i < n - 1; i++) {
                    long var = arr[i + 1] - arr[i];
                    if (max < var) {
                        max = var;
                    }
                }
            }
            sout.println(max);
        }
        sout.close();
    }

    private static boolean checkPrime(long n) {
        for (long i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return n >= 2;
    }

    public static List<Integer> getPrimesList(int N) {
        boolean[] isComposite = new boolean[N + 1];
        for (int i = 2; i <= N; i++) {
            if (isComposite[i])
                continue;
            for (int j = i * 2; j <= N; j += i)
                isComposite[j] = true;
        }
        List<Integer> numbers = new ArrayList<>();
        for (int i = 2; i <= N; i++)
            if (!isComposite[i])
                numbers.add(i);
        return numbers;
    }

    static class Node {
        int value;
        //List<Town> edges = new ArrayList<>();

        public Node(int value) {
            this.value = value;
        }
    }

    public static int binarySearch(long[] array, long value) {
        int left = 0, right = array.length - 1;
        while (left <= right) {
            int m = (left + right) / 2;
            if (array[m] == value)
                return m;
            else if (array[m] < value)
                left = m + 1;
            else
                right = m - 1;
        }
        return -1;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static void sort(int[] a) {
        ArrayList<Integer> l = new ArrayList<>();
        for (int i : a)
            l.add(i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++)
            a[i] = l.get(i);
    }

    private static int upperBound(int[] a, int low, int high, int element) {
        while (low < high) {
            int middle = low + (high - low) / 2;
            if (a[middle] > element)
                high = middle;
            else
                low = middle + 1;
        }
        return low;
    }

    public static class InputReader {
        private BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String nextToken() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(nextToken());
        }

        public long nextLong() {
            return Long.parseLong(nextToken());
        }

        public double nextDouble() {
            return Double.parseDouble(nextToken());
        }
    }
}
